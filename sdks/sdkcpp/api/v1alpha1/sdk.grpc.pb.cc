// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: sdk.proto

#include "sdk.pb.h"
#include "sdk.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace carrier {
namespace dev {
namespace sdk {

static const char* SDK_method_names[] = {
  "/carrier.dev.sdk.SDK/GetGameServer",
  "/carrier.dev.sdk.SDK/WatchGameServer",
  "/carrier.dev.sdk.SDK/SetLabel",
  "/carrier.dev.sdk.SDK/SetAnnotation",
  "/carrier.dev.sdk.SDK/SetCondition",
};

std::unique_ptr< SDK::Stub> SDK::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SDK::Stub> stub(new SDK::Stub(channel));
  return stub;
}

SDK::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetGameServer_(SDK_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WatchGameServer_(SDK_method_names[1], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SetLabel_(SDK_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetAnnotation_(SDK_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetCondition_(SDK_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SDK::Stub::GetGameServer(::grpc::ClientContext* context, const ::carrier::dev::sdk::Empty& request, ::carrier::dev::sdk::GameServer* response) {
  return ::grpc::internal::BlockingUnaryCall< ::carrier::dev::sdk::Empty, ::carrier::dev::sdk::GameServer, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetGameServer_, context, request, response);
}

void SDK::Stub::experimental_async::GetGameServer(::grpc::ClientContext* context, const ::carrier::dev::sdk::Empty* request, ::carrier::dev::sdk::GameServer* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::carrier::dev::sdk::Empty, ::carrier::dev::sdk::GameServer, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetGameServer_, context, request, response, std::move(f));
}

void SDK::Stub::experimental_async::GetGameServer(::grpc::ClientContext* context, const ::carrier::dev::sdk::Empty* request, ::carrier::dev::sdk::GameServer* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetGameServer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::carrier::dev::sdk::GameServer>* SDK::Stub::PrepareAsyncGetGameServerRaw(::grpc::ClientContext* context, const ::carrier::dev::sdk::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::carrier::dev::sdk::GameServer, ::carrier::dev::sdk::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetGameServer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::carrier::dev::sdk::GameServer>* SDK::Stub::AsyncGetGameServerRaw(::grpc::ClientContext* context, const ::carrier::dev::sdk::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetGameServerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::carrier::dev::sdk::GameServer>* SDK::Stub::WatchGameServerRaw(::grpc::ClientContext* context, const ::carrier::dev::sdk::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::carrier::dev::sdk::GameServer>::Create(channel_.get(), rpcmethod_WatchGameServer_, context, request);
}

void SDK::Stub::experimental_async::WatchGameServer(::grpc::ClientContext* context, ::carrier::dev::sdk::Empty* request, ::grpc::experimental::ClientReadReactor< ::carrier::dev::sdk::GameServer>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::carrier::dev::sdk::GameServer>::Create(stub_->channel_.get(), stub_->rpcmethod_WatchGameServer_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::carrier::dev::sdk::GameServer>* SDK::Stub::AsyncWatchGameServerRaw(::grpc::ClientContext* context, const ::carrier::dev::sdk::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::carrier::dev::sdk::GameServer>::Create(channel_.get(), cq, rpcmethod_WatchGameServer_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::carrier::dev::sdk::GameServer>* SDK::Stub::PrepareAsyncWatchGameServerRaw(::grpc::ClientContext* context, const ::carrier::dev::sdk::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::carrier::dev::sdk::GameServer>::Create(channel_.get(), cq, rpcmethod_WatchGameServer_, context, request, false, nullptr);
}

::grpc::Status SDK::Stub::SetLabel(::grpc::ClientContext* context, const ::carrier::dev::sdk::KeyValue& request, ::carrier::dev::sdk::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::carrier::dev::sdk::KeyValue, ::carrier::dev::sdk::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetLabel_, context, request, response);
}

void SDK::Stub::experimental_async::SetLabel(::grpc::ClientContext* context, const ::carrier::dev::sdk::KeyValue* request, ::carrier::dev::sdk::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::carrier::dev::sdk::KeyValue, ::carrier::dev::sdk::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetLabel_, context, request, response, std::move(f));
}

void SDK::Stub::experimental_async::SetLabel(::grpc::ClientContext* context, const ::carrier::dev::sdk::KeyValue* request, ::carrier::dev::sdk::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetLabel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::carrier::dev::sdk::Empty>* SDK::Stub::PrepareAsyncSetLabelRaw(::grpc::ClientContext* context, const ::carrier::dev::sdk::KeyValue& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::carrier::dev::sdk::Empty, ::carrier::dev::sdk::KeyValue, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetLabel_, context, request);
}

::grpc::ClientAsyncResponseReader< ::carrier::dev::sdk::Empty>* SDK::Stub::AsyncSetLabelRaw(::grpc::ClientContext* context, const ::carrier::dev::sdk::KeyValue& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetLabelRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SDK::Stub::SetAnnotation(::grpc::ClientContext* context, const ::carrier::dev::sdk::KeyValue& request, ::carrier::dev::sdk::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::carrier::dev::sdk::KeyValue, ::carrier::dev::sdk::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetAnnotation_, context, request, response);
}

void SDK::Stub::experimental_async::SetAnnotation(::grpc::ClientContext* context, const ::carrier::dev::sdk::KeyValue* request, ::carrier::dev::sdk::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::carrier::dev::sdk::KeyValue, ::carrier::dev::sdk::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetAnnotation_, context, request, response, std::move(f));
}

void SDK::Stub::experimental_async::SetAnnotation(::grpc::ClientContext* context, const ::carrier::dev::sdk::KeyValue* request, ::carrier::dev::sdk::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetAnnotation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::carrier::dev::sdk::Empty>* SDK::Stub::PrepareAsyncSetAnnotationRaw(::grpc::ClientContext* context, const ::carrier::dev::sdk::KeyValue& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::carrier::dev::sdk::Empty, ::carrier::dev::sdk::KeyValue, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetAnnotation_, context, request);
}

::grpc::ClientAsyncResponseReader< ::carrier::dev::sdk::Empty>* SDK::Stub::AsyncSetAnnotationRaw(::grpc::ClientContext* context, const ::carrier::dev::sdk::KeyValue& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetAnnotationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SDK::Stub::SetCondition(::grpc::ClientContext* context, const ::carrier::dev::sdk::KeyValue& request, ::carrier::dev::sdk::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::carrier::dev::sdk::KeyValue, ::carrier::dev::sdk::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetCondition_, context, request, response);
}

void SDK::Stub::experimental_async::SetCondition(::grpc::ClientContext* context, const ::carrier::dev::sdk::KeyValue* request, ::carrier::dev::sdk::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::carrier::dev::sdk::KeyValue, ::carrier::dev::sdk::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetCondition_, context, request, response, std::move(f));
}

void SDK::Stub::experimental_async::SetCondition(::grpc::ClientContext* context, const ::carrier::dev::sdk::KeyValue* request, ::carrier::dev::sdk::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetCondition_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::carrier::dev::sdk::Empty>* SDK::Stub::PrepareAsyncSetConditionRaw(::grpc::ClientContext* context, const ::carrier::dev::sdk::KeyValue& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::carrier::dev::sdk::Empty, ::carrier::dev::sdk::KeyValue, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetCondition_, context, request);
}

::grpc::ClientAsyncResponseReader< ::carrier::dev::sdk::Empty>* SDK::Stub::AsyncSetConditionRaw(::grpc::ClientContext* context, const ::carrier::dev::sdk::KeyValue& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetConditionRaw(context, request, cq);
  result->StartCall();
  return result;
}

SDK::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SDK_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SDK::Service, ::carrier::dev::sdk::Empty, ::carrier::dev::sdk::GameServer, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SDK::Service* service,
             ::grpc::ServerContext* ctx,
             const ::carrier::dev::sdk::Empty* req,
             ::carrier::dev::sdk::GameServer* resp) {
               return service->GetGameServer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SDK_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< SDK::Service, ::carrier::dev::sdk::Empty, ::carrier::dev::sdk::GameServer>(
          [](SDK::Service* service,
             ::grpc::ServerContext* ctx,
             const ::carrier::dev::sdk::Empty* req,
             ::grpc::ServerWriter<::carrier::dev::sdk::GameServer>* writer) {
               return service->WatchGameServer(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SDK_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SDK::Service, ::carrier::dev::sdk::KeyValue, ::carrier::dev::sdk::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SDK::Service* service,
             ::grpc::ServerContext* ctx,
             const ::carrier::dev::sdk::KeyValue* req,
             ::carrier::dev::sdk::Empty* resp) {
               return service->SetLabel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SDK_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SDK::Service, ::carrier::dev::sdk::KeyValue, ::carrier::dev::sdk::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SDK::Service* service,
             ::grpc::ServerContext* ctx,
             const ::carrier::dev::sdk::KeyValue* req,
             ::carrier::dev::sdk::Empty* resp) {
               return service->SetAnnotation(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SDK_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SDK::Service, ::carrier::dev::sdk::KeyValue, ::carrier::dev::sdk::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SDK::Service* service,
             ::grpc::ServerContext* ctx,
             const ::carrier::dev::sdk::KeyValue* req,
             ::carrier::dev::sdk::Empty* resp) {
               return service->SetCondition(ctx, req, resp);
             }, this)));
}

SDK::Service::~Service() {
}

::grpc::Status SDK::Service::GetGameServer(::grpc::ServerContext* context, const ::carrier::dev::sdk::Empty* request, ::carrier::dev::sdk::GameServer* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SDK::Service::WatchGameServer(::grpc::ServerContext* context, const ::carrier::dev::sdk::Empty* request, ::grpc::ServerWriter< ::carrier::dev::sdk::GameServer>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SDK::Service::SetLabel(::grpc::ServerContext* context, const ::carrier::dev::sdk::KeyValue* request, ::carrier::dev::sdk::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SDK::Service::SetAnnotation(::grpc::ServerContext* context, const ::carrier::dev::sdk::KeyValue* request, ::carrier::dev::sdk::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SDK::Service::SetCondition(::grpc::ServerContext* context, const ::carrier::dev::sdk::KeyValue* request, ::carrier::dev::sdk::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace carrier
}  // namespace dev
}  // namespace sdk

